import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './Yes.css';

function Yes() {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•": '',
    "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô": '',
    "‡∏≠‡∏≤‡∏¢‡∏∏": '',
    "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå": '',
    "‡∏™‡∏±‡∏ï‡∏ß‡πå‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö": '',
    "‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö": '',
    "‡∏™‡∏µ‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö": '',
    "‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ‡πÑ‡∏õ‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô ‡∏≠‡∏¢‡∏≤‡∏Å‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡πÑ‡∏´‡∏ô": '',
    "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏ö‡∏≠‡∏Å‡∏Å‡∏±‡∏ô‡πÑ‡∏´‡∏°": ''
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå
    Object.keys(formData).forEach(key => {
      if (!formData[key].trim()) {
        newErrors[key] = `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å${key}`;
      }
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
    if (formData["‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"] && !/^\d{10}$/.test(formData["‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"])) {
      newErrors["‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"] = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (10 ‡∏´‡∏•‡∏±‡∏Å)";
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏
    if (formData["‡∏≠‡∏≤‡∏¢‡∏∏"] && (isNaN(formData["‡∏≠‡∏≤‡∏¢‡∏∏"]) || formData["‡∏≠‡∏≤‡∏¢‡∏∏"] < 1)) {
      newErrors["‡∏≠‡∏≤‡∏¢‡∏∏"] = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (validateForm()) {
      try {
        console.log('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', formData); // ‡πÄ‡∏û‡∏¥‡πà‡∏° log

        const response = await fetch('http://localhost:3001/send-to-line', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ formData })
        });

        const result = await response.json(); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
        console.log('‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á:', result); // ‡πÄ‡∏û‡∏¥‡πà‡∏° log

        if (response.ok) {
          alert('‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
          navigate('/pincheck');
        } else {
          alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.error);
        }
      } catch (error) {
        console.error('Error:', error);
        alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + error.message);
      }
    }
  };

  return (
    <div className="yes-page">
      <div className="form-container">
        <h1>Personal Information <span className="heart-icon">üíï</span></h1>
        <form onSubmit={handleSubmit}>
          {Object.keys(formData).map((fieldName) => (
            <div className="form-group" key={fieldName}>
              <label>{fieldName}:</label>
              {fieldName === "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÉ‡∏´‡πâ‡∏û‡∏µ‡πà‡∏£‡∏π‡πâ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏´‡∏ô‡∏π‡∏≠‡∏µ‡∏Å‡πÑ‡∏´‡∏°" ? (
                <textarea
                  name={fieldName}
                  value={formData[fieldName]}
                  onChange={handleChange}
                  placeholder={`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å${fieldName}`}
                  className={errors[fieldName] ? 'error' : ''}
                  rows="4"
                />
              ) : (
                <input
                  type={
                    fieldName === "‡∏≠‡∏≤‡∏¢‡∏∏" ? "number" : 
                    fieldName === "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" ? "tel" : 
                    "text"
                  }
                  name={fieldName}
                  value={formData[fieldName]}
                  onChange={handleChange}
                  placeholder={`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å${fieldName}`}
                  className={errors[fieldName] ? 'error' : ''}
                />
              )}
              {errors[fieldName] && (
                <div className="error-message">{errors[fieldName]}</div>
              )}
            </div>
          ))}
          <button type="submit" className="submit-btn">Submit</button>
        </form>
      </div>
    </div>
  );
}

export default Yes;
