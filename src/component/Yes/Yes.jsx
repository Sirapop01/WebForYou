import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import './Yes.css';

function Yes() {
  const navigate = useNavigate();
  const [formData, setFormData] = useState({
    "‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•": '',
    "‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏•‡πà‡∏ô": '',
    "‡∏≠‡∏≤‡∏¢‡∏∏": '',
    "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå": '',
    "‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏≠‡∏¢‡∏≤‡∏Å‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡∏Å‡∏±‡∏ô‡πÑ‡∏´‡∏°": ''
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevState => ({
      ...prevState,
      [name]: value
    }));
    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ü‡∏¥‡∏•‡∏î‡πå
    Object.keys(formData).forEach(key => {
      if (!formData[key].trim()) {
        newErrors[key] = `‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å${key}`;
      }
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
    if (formData["‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"] && !/^\d{10}$/.test(formData["‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"])) {
      newErrors["‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"] = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (10 ‡∏´‡∏•‡∏±‡∏Å)";
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏
    if (formData["‡∏≠‡∏≤‡∏¢‡∏∏"] && (isNaN(formData["‡∏≠‡∏≤‡∏¢‡∏∏"]) || formData["‡∏≠‡∏≤‡∏¢‡∏∏"] < 1)) {
      newErrors["‡∏≠‡∏≤‡∏¢‡∏∏"] = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    if (validateForm()) {
      navigate('/pincheck');
    }
  };

  return (
    <div className="yes-page">
      <div className="form-container">
        <h1>Personal Information üíï</h1>
        <form onSubmit={handleSubmit}>
          {Object.keys(formData).map((fieldName) => (
            <div className="form-group" key={fieldName}>
              <label>{fieldName}:</label>
              <input
                type={fieldName === "‡∏≠‡∏≤‡∏¢‡∏∏" ? "number" : 
                      fieldName === "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" ? "tel" : "text"}
                name={fieldName}
                value={formData[fieldName]}
                onChange={handleChange}
                placeholder={`‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å${fieldName}`}
                className={errors[fieldName] ? 'error' : ''}
              />
              {errors[fieldName] && (
                <div className="error-message">{errors[fieldName]}</div>
              )}
            </div>
          ))}
          <button type="submit" className="submit-btn">Submit</button>
        </form>
      </div>
    </div>
  );
}

export default Yes;
